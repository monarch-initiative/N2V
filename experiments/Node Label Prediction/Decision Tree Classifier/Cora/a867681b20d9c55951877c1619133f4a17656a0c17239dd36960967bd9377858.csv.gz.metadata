{
    "creation_time": 1652447960.316658,
    "creation_time_human": "2022-05-13 15:19:20",
    "time_delta": 1.7760071754455566,
    "time_delta_human": "1 second",
    "file_dump_time": 0.005084991455078125,
    "file_dump_time_human": "0 seconds",
    "file_dump_size": 2366,
    "file_dump_size_human": "2.4 kB",
    "load_kwargs": {},
    "dump_kwargs": {},
    "function_name": "evaluate_classifier",
    "function_file": "/Users/lucacappelletti/github/embiggen/embiggen/utils/pipeline.py:172",
    "args_to_ignore": [],
    "source": "@Cache(\n    cache_path=\"{cache_dir}/{task_name}/{model_name}/{graph_name}/{_hash}.csv.gz\",\n    cache_dir=\"experiments\"\n)\ndef evaluate_classifier(\n    classifier: Type[AbstractClassifierModel],\n    task_name: str,\n    model_name: str,\n    graph_name: str,\n    graph: Graph,\n    evaluation_schema: str,\n    holdouts_kwargs: Dict[str, Any],\n    node_features: Optional[Union[str, pd.DataFrame, np.ndarray, Type[AbstractEmbeddingModel], List[Union[str, pd.DataFrame, np.ndarray, Type[AbstractEmbeddingModel]]]]] = None,\n    edge_features: Optional[Union[str, pd.DataFrame, np.ndarray, List[Union[str, pd.DataFrame, np.ndarray]]]] = None,\n    subgraph_of_interest: Optional[Graph] = None,\n    number_of_holdouts: int = 10,\n    random_state: int = 42,\n    **evaluation_kwargs: Dict\n) -> pd.DataFrame:\n    \"\"\"Executes cache evaluation for model.\"\"\"\n    return classifier.evaluate(\n        graph,\n        evaluation_schema=evaluation_schema,\n        holdouts_kwargs=holdouts_kwargs,\n        node_features=node_features,\n        edge_features=edge_features,\n        subgraph_of_interest=subgraph_of_interest,\n        number_of_holdouts=number_of_holdouts,\n        random_state=random_state,\n        **evaluation_kwargs\n    )\n",
    "backend_metadata": {
        "type": "pandas",
        "columns_types": {
            "evaluation_mode": "str",
            "train_size": "float64",
            "edges_number": "int64",
            "accuracy_score": "float64",
            "balanced_accuracy_score": "float64",
            "f1_score macro": "float64",
            "f1_score weighted": "float64",
            "precision_score macro": "float64",
            "precision_score weighted": "float64",
            "recall_score macro": "float64",
            "recall_score weighted": "float64",
            "roc_auc_score macro": "float64",
            "roc_auc_score weighted": "float64",
            "required_training_time": "float64",
            "task_name": "str",
            "model_name": "str",
            "library_name": "str",
            "graph_name": "str",
            "number_of_holdouts": "int64",
            "evaluation_schema": "str",
            "random_state": "int64",
            "criterion": "str",
            "splitter": "str",
            "max_depth": "str",
            "min_samples_split": "int64",
            "min_samples_leaf": "int64",
            "min_weight_fraction_leaf": "float64",
            "max_features": "str",
            "max_leaf_nodes": "str",
            "min_impurity_decrease": "float64",
            "min_impurity_split": "str",
            "class_weight": "str",
            "ccp_alpha": "float64"
        },
        "index_type": "int64",
        "columns_names_type": "str"
    },
    "parameters": {
        "random_state": 42,
        "number_of_holdouts": 10,
        "subgraph_of_interest": null,
        "edge_features": null,
        "node_features": "SPINE",
        "task_name": "Node Label Prediction",
        "model_name": "Decision Tree Classifier",
        "graph_name": "Cora",
        "evaluation_schema": "Stratified Monte Carlo",
        "holdouts_kwargs": {
            "train_size": 0.8
        }
    }
}